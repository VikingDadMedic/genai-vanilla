services:
  supabase-db:
    image: supabase/postgres:17.4.1.016
    container_name: ${PROJECT_NAME}-supabase-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${SUPABASE_DB_USER}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: ${SUPABASE_DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./supabase/db/snapshot:/snapshot
    ports:
      - "${SUPABASE_DB_PORT}:5432"
    networks:
      - backend-bridge-network

  redis:
    image: redis:7.2-alpine
    container_name: ${PROJECT_NAME}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT}:6379"
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    networks:
      - backend-bridge-network

  supabase-db-init:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME}-supabase-db-init
    restart: no
    env_file:
      - .env
    environment:
      PGHOST: supabase-db
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      PGDATABASE: ${SUPABASE_DB_NAME}
    volumes:
      - ./supabase/db/scripts:/scripts
    entrypoint: ["/scripts/db-init-runner.sh"]
    depends_on:
      - supabase-db
    networks:
      - backend-bridge-network

  supabase-meta:
    image: supabase/postgres-meta:v0.88.9
    container_name: ${PROJECT_NAME}-supabase-meta
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${SUPABASE_DB_NAME}
      PG_META_DB_USER: ${SUPABASE_DB_USER}
      PG_META_DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
    ports:
      - "${SUPABASE_META_PORT}:8080"
    networks:
      - backend-bridge-network

  kong-api-gateway:
    container_name: ${PROJECT_NAME}-kong-api-gateway
    image: kong:3.9.0
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${KONG_HTTP_PORT}:8000/tcp
      - ${KONG_HTTPS_PORT}:8443/tcp
    volumes:
      - ./volumes/api/kong.yml:/home/kong/kong.yml:ro,z
    depends_on:
      redis:
        condition: service_started
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
      supabase-realtime:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-meta:
        condition: service_started
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth,rate-limiting
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      KONG_REDIS_HOST: redis
      KONG_REDIS_PORT: 6379
      KONG_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    networks:
      - backend-bridge-network

  supabase-storage:
    image: supabase/storage-api:v1.22.7
    container_name: ${PROJECT_NAME}-supabase-storage
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      JWT_SECRET: ${SUPABASE_JWT_SECRET}
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      REGION: ${STORAGE_REGION}
      FILE_SIZE_LIMIT: ${STORAGE_FILE_SIZE_LIMIT}
      STORAGE_BACKEND: ${STORAGE_BACKEND}
      FILE_STORAGE_PATH: /var/lib/storage
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: ${TENANT_ID}
      PROJECT_REF: ${PROJECT_REF}
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      POSTGREST_URL: http://supabase-api:3000
      GOTRUE_URL: http://supabase-auth:9999
    ports:
      - "${SUPABASE_STORAGE_PORT}:5000"
    volumes:
      - supabase-storage-data:/var/lib/storage
    networks:
      - backend-bridge-network

  supabase-auth:
    image: supabase/gotrue:v2.171.0
    container_name: ${PROJECT_NAME}-supabase-auth
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      GOTRUE_SITE_URL: http://supabase-studio:3000 # Adjust if needed for prod
      API_EXTERNAL_URL: http://supabase-auth:9999
      GOTRUE_DB_DRIVER: postgres
      DB_NAMESPACE: auth
      GOTRUE_DB_DATABASE_URL: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      GOTRUE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
      GOTRUE_MAILER_URLPATHS_INVITE: "/invite"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/confirm"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "/recover"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/email-change"
      GOTRUE_SMTP_HOST: "localhost" # Replace with actual SMTP host in prod
      GOTRUE_SMTP_PORT: 1025 # Replace with actual SMTP port in prod
      GOTRUE_SMTP_USER: "" # Replace with actual SMTP user in prod
      GOTRUE_SMTP_PASS: "" # Replace with actual SMTP pass in prod
      GOTRUE_SMTP_SENDER_NAME: "Supabase Auth"
      GOTRUE_SMTP_ADMIN_EMAIL: "admin@example.com" # Replace with actual admin email
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_SITE_NAME: "Local Supabase" # Replace with actual site name
    ports:
      - "${SUPABASE_AUTH_PORT}:9999"
    networks:
      - backend-bridge-network

  supabase-api:
    image: postgrest/postgrest:v12.2.10
    container_name: ${PROJECT_NAME}-supabase-api
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      PGRST_DB_URI: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      PGRST_DB_SCHEMA: "public,storage,auth"
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - "${SUPABASE_API_PORT}:3000"
    networks:
      - backend-bridge-network

  supabase-realtime:
    image: supabase/realtime:v2.33.72
    container_name: ${PROJECT_NAME}-supabase-realtime
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
    env_file:
      - .env
    environment:
      # Database connection
      DB_HOST: supabase-db
      DB_PORT: 5432
      DB_NAME: ${SUPABASE_DB_NAME}
      DB_USER: ${SUPABASE_DB_USER}
      DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
      # Replication configuration
      DB_SLOT: supabase_realtime_slot
      DB_CHANNEL_ENABLED: "true"
      # JWT configuration
      JWT_SECRET: ${SUPABASE_JWT_SECRET}
      JWT_ROLE: service_role
      # Server configuration
      PORT: 4000
      REPLICATION_MODE: RLS
      SECURE_CHANNELS: "true"
      # Additional configuration
      IP_VERSION: ipv4
      # Required Phoenix/Erlang configuration
      SECRET_KEY_BASE: ${SUPABASE_JWT_SECRET}
      RLIMIT_NOFILE: 65536
      ERL_AFLAGS: "-proto_dist inet_tcp"
      HOSTNAME: supabase-realtime
      FLY_APP_NAME: ${PROJECT_NAME}-realtime
      APP_NAME: realtime
    ports:
      - "${SUPABASE_REALTIME_PORT}:4000"
    networks:
      - backend-bridge-network

  supabase-studio:
    image: supabase/studio:latest
    container_name: ${PROJECT_NAME}-supabase-studio
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      supabase-meta:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
      supabase-realtime:
        condition: service_started
      kong-api-gateway:
        condition: service_started
    env_file:
      - .env
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      SUPABASE_URL: http://kong-api-gateway:8000
      SUPABASE_PUBLIC_URL: http://localhost:${KONG_HTTP_PORT}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      DEFAULT_ORGANIZATION_NAME: ${PROJECT_NAME}
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      AUTH_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
    ports:
      - "${SUPABASE_STUDIO_PORT}:3000"
    networks:
      - backend-bridge-network

  neo4j-graph-db:
    build:
      context: ./graph-db
    container_name: ${PROJECT_NAME}-neo4j-graph-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NEO4J_AUTH: ${GRAPH_DB_AUTH}
      NEO4J_server_default__advertised__address: "neo4j-graph-db"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_browser_remote__content__hostname__whitelist: "*"
    ports:
      - "${GRAPH_DB_PORT}:7687"
      - "${GRAPH_DB_DASHBOARD_PORT}:7474"
    volumes:
      - ./graph-db/scripts:/scripts
      - ./graph-db/snapshot:/snapshot
      - graph-db-data:/data
    networks:
      - backend-bridge-network

  ollama:
    image: ollama/ollama:latest
    container_name: ${PROJECT_NAME}-ollama
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "${OLLAMA_PORT}:11434"
    environment:
      NVIDIA_VISIBLE_DEVICES: "all"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
    cpus: ${PROD_ENV_CPUS:-2}
    mem_limit: ${PROD_ENV_MEM_LIMIT:-8g}
    networks:
      - backend-bridge-network

  ollama-pull:
    image: alpine:latest
    container_name: ${PROJECT_NAME}-ollama-pull
    restart: "no"
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama:
        condition: service_started
    env_file:
      - .env
    networks:
      - backend-bridge-network
    environment:
      PGHOST: supabase-db
      PGPORT: 5432
      PGDATABASE: ${SUPABASE_DB_NAME}
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      OLLAMA_HOST_URL: http://ollama:11434
    volumes:
      - ./ollama-pull/scripts:/scripts
    entrypoint: ["/scripts/pull.sh"]

  local-deep-researcher:
    build:
      context: ./local-deep-researcher
    container_name: ${PROJECT_NAME}-local-deep-researcher
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama-pull:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      # Database connection for LLM config
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      # Ollama connection (containerized)
      OLLAMA_BASE_URL: http://ollama:11434
      # Search configuration
      SEARCH_API: ${LOCAL_DEEP_RESEARCHER_SEARCH_API:-duckduckgo}
      MAX_WEB_RESEARCH_LOOPS: ${LOCAL_DEEP_RESEARCHER_LOOPS:-3}
    ports:
      - "${LOCAL_DEEP_RESEARCHER_PORT}:2024"
    volumes:
      - local-deep-researcher-data:/app/data
    networks:
      - backend-bridge-network

  open-web-ui:
    image: dyrnq/open-webui:latest
    container_name: ${PROJECT_NAME}-open-web-ui
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama-pull:
        condition: service_completed_successfully
      local-deep-researcher:
        condition: service_started
      supabase-realtime:
        condition: service_started
      supabase-storage:
        condition: service_started
      kong-api-gateway:
        condition: service_started
    env_file:
      - .env
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      WEBUI_SECRET_KEY: ${OPEN_WEB_UI_SECRET_KEY}
      # DATABASE_SCHEMA: openwebui
    volumes:
      - open-web-ui-data:/app/backend/data
      # Functions directory removed - using tools integration instead
      # - ./open-webui/functions:/app/backend/data/functions
    ports:
      - "${OPEN_WEB_UI_PORT}:8080"
    networks:
      - backend-bridge-network

  backend:
    build:
      context: ./backend
    container_name: ${PROJECT_NAME}-backend
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama-pull:
        condition: service_completed_successfully
      neo4j-graph-db:
        condition: service_started
      redis:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-realtime:
        condition: service_started
      kong-api-gateway:
        condition: service_started
      n8n:
        condition: service_started
    env_file:
      - .env
    environment:
      KONG_URL: http://kong-api-gateway:8000
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      OLLAMA_BASE_URL: http://ollama:11434
      NEO4J_URI: bolt://neo4j-graph-db:7687
      NEO4J_USER: ${GRAPH_DB_USER}
      NEO4J_PASSWORD: ${GRAPH_DB_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      PROD_MODE: true
      N8N_BASE_URL: http://n8n:5678
    volumes:
      - ./backend/app:/app
      - backend-data:/app/data
    ports:
      - "${BACKEND_PORT}:8000"
    cpus: ${PROD_ENV_BACKEND_CPUS:-1}
    mem_limit: ${PROD_ENV_BACKEND_MEM_LIMIT:-2g}
    networks:
      - backend-bridge-network

  n8n:
    image: n8nio/n8n:latest
    container_name: ${PROJECT_NAME}-n8n
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama-pull:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: supabase-db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${SUPABASE_DB_NAME}
      DB_POSTGRESDB_USER: ${SUPABASE_DB_USER}
      DB_POSTGRESDB_PASSWORD: ${SUPABASE_DB_PASSWORD}
      DB_POSTGRESDB_SCHEMA: n8n
      DB_SCHEMA: n8n
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      N8N_PATH: ${N8N_PATH:-/}
      NODE_ENV: production
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_AUTH_ENABLED: ${N8N_AUTH_ENABLED:-true}
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_SECURE_COOKIE: false
      N8N_RUNNERS_ENABLED: true
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true
      NODE_OPTIONS: --max_old_space_size=512
      EXECUTIONS_MODE: ${N8N_EXECUTIONS_MODE:-queue}
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      QUEUE_BULL_REDIS_DB: 0
    ports:
      - "${N8N_PORT}:5678"
    volumes:
      - n8n-data:/home/node/.n8n
    cpus: ${PROD_ENV_N8N_CPUS:-1}
    mem_limit: ${PROD_ENV_N8N_MEM_LIMIT:-2g}
    networks:
      - backend-bridge-network

networks:
  backend-bridge-network:
    driver: bridge

volumes:
  supabase-db-data:
    driver: local
  redis-data:
    driver: local
  graph-db-data:
    driver: local
  ollama-data:
    driver: local
  local-deep-researcher-data:
    driver: local
  open-web-ui-data:
    driver: local
  backend-data:
    driver: local
  supabase-storage-data:
    driver: local
  n8n-data:
    driver: local
