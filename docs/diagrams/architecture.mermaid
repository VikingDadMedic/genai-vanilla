graph LR
    %% This diagram represents the new modular Docker Compose profile architecture.
    %% Services are organized into profiles: data.yml, ai.yml/ai-local.yml/ai-gpu.yml, apps.yml/apps-local.yml/apps-gpu.yml
    %% For ai-local profile, the 'ollama' container is removed, and services connect to local Ollama via host.docker.internal:11434.
    %% For ai-gpu profile, Ollama runs with NVIDIA GPU acceleration.
    %% The start.sh script handles profile selection and consistent environment variable management.

    %% Define styles
    classDef database fill:#a5d8ff,stroke:#1971c2,color:#1e1e1e
    classDef cache fill:#f8d7da,stroke:#dc3545,color:#1e1e1e
    classDef ai fill:#f5d0fe,stroke:#9c36b5,color:#1e1e1e
    classDef ui fill:#ffd8a8,stroke:#e8590c,color:#1e1e1e
    classDef api fill:#b2f2bb,stroke:#2f9e44,color:#1e1e1e
    
    %% Data Services Profile (data.yml)
    subgraph DataProfile[Data Profile - data.yml]
        direction LR
        supabase-db[supabase-db]
        redis[redis]:::cache
        supabase-db-init(supabase-db-init)
        subgraph SupabaseCore[Supabase Core Services]
        direction TB
        supabase-meta[supabase-meta]
        supabase-storage[supabase-storage]
        supabase-auth[supabase-auth]
        supabase-api[supabase-api]
        supabase-realtime[supabase-realtime]
        end
        neo4j-graph-db[neo4j-graph-db]
    end

    %% AI Services Profile (ai.yml / ai-local.yml / ai-gpu.yml)
    subgraph AIProfile[AI Profile - ai.yml/ai-local.yml/ai-gpu.yml]
        direction TB
        ollama[ollama - containerized]
        ollama-local[host.docker.internal:11434 - local]
        ollama-pull[ollama-pull]
        comfyui-init[comfyui-init]
        n8n-init[n8n-init]
        local-deep-researcher[local-deep-researcher]
        n8n[n8n]:::api
        comfyui[comfyui]:::ai
    end
    
    %% Apps Services Profile (apps.yml / apps-local.yml / apps-gpu.yml)
    subgraph AppsProfile[Apps Profile - apps.yml/apps-local.yml/apps-gpu.yml]
        direction TB
        kong-api-gateway[Kong API Gateway]
        backend[backend]
        open-web-ui[open-web-ui]
        supabase-studio[supabase-studio]
    end
    
    %% Connections / Dependencies
    supabase-db -- "Depends on DB Started" --> supabase-db-init
    supabase-db-init -- "Runs Custom Initialization SQL" --> supabase-db
    supabase-db-init -- "Completes Successfully" --> redis
    supabase-db-init -- "Completes Successfully" --> supabase-meta
    supabase-db-init -- "Completes Successfully" --> supabase-storage
    supabase-db-init -- "Completes Successfully" --> supabase-auth
    supabase-db-init -- "Completes Successfully" --> supabase-api
    supabase-db-init -- "Completes Successfully" --> supabase-realtime
    supabase-db-init -- "Completes Successfully" --> supabase-studio
    supabase-db-init -- "Completes Successfully" --> ollama-pull
    supabase-db-init -- "Completes Successfully" --> comfyui-init
    supabase-db-init -- "Completes Successfully" --> local-deep-researcher
    supabase-db-init -- "Completes Successfully" --> backend
    supabase-db-init -- "Completes Successfully" --> open-web-ui
    supabase-db-init -- "Completes Successfully" --> n8n
    n8n -- "Service Started" --> n8n-init
    n8n-init -- "Installs Community Nodes" --> n8n
    supabase-db-init -- "Completes Successfully" --> comfyui

    %% Service Inter-dependencies (After db-init)
    %% Connections now go through Kong where applicable
    supabase-meta --> supabase-studio
    supabase-auth --> kong-api-gateway
    supabase-api --> kong-api-gateway
    supabase-storage --> kong-api-gateway
    supabase-realtime --> kong-api-gateway
    supabase-studio -- API Calls --> kong-api-gateway
    backend -- "HTTP API Calls (Auth, Storage)" --> kong-api-gateway
    open-web-ui -- API Calls --> kong-api-gateway

    kong-api-gateway -- Routes --> supabase-auth
    kong-api-gateway -- Routes --> supabase-api
    kong-api-gateway -- Routes --> supabase-storage
    kong-api-gateway -- Routes --> supabase-realtime
    kong-api-gateway -- Routes --> supabase-meta
    kong-api-gateway -- Routes --> supabase-studio
    kong-api-gateway -- Routes --> n8n
    kong-api-gateway -- Routes --> comfyui
    kong-api-gateway -- "Routes /research/*" --> backend

    kong-api-gateway -- "Depends on" --> redis
    kong-api-gateway -- "Depends on" --> supabase-auth
    kong-api-gateway -- "Depends on" --> supabase-api
    kong-api-gateway -- "Depends on" --> supabase-storage
    kong-api-gateway -- "Depends on" --> supabase-realtime
    kong-api-gateway -- "Depends on" --> supabase-meta

    backend -- "Bolt (Direct)" --> neo4j-graph-db
    backend -- "HTTP API (Direct)" --> ollama
    backend -- "DB Connection (Direct)" --> supabase-db
    n8n -- "DB Connection (Direct)" --> supabase-db
    n8n -- "Queue Management" --> redis
    backend -- "Workflow Automation" --> n8n
    backend -- "Cache, Pub/Sub, Geohashing" --> redis
    ollama-pull -- "Completes Successfully" --> local-deep-researcher
    ollama-pull -- "Completes Successfully" --> open-web-ui
    ollama-pull -- "Completes Successfully" --> backend
    ollama-pull -- "Completes Successfully" --> n8n
    ollama-pull -- "Completes Successfully" --> comfyui-init
    comfyui-init -- "Completes Successfully" --> comfyui
    ollama -- "Depends on Ollama Started" --> ollama-pull
    
    %% Local Deep Researcher connections
    local-deep-researcher -- "DB Query for LLM Config" --> supabase-db
    local-deep-researcher -- "HTTP API (Direct)" --> ollama
    backend -- "Research API HTTP Client" --> local-deep-researcher
    n8n -- "Research Webhook Calls" --> backend
    
    %% Open-WebUI research integration via tools
    open-web-ui -- "Research Tools API" --> backend
    
    %% ComfyUI integrations
    comfyui-init -- "Model Management DB Query" --> supabase-db
    comfyui -- "HTTP API (Direct)" --> ollama
    backend -- "Image Generation API" --> comfyui
    open-web-ui -- "Image Generation" --> comfyui
    n8n -- "Image Workflow Automation" --> comfyui
    comfyui -- "Storage Upload" --> supabase-storage

    %% Add dependency of Studio on Kong
    supabase-studio -- "Depends on" --> kong-api-gateway
    open-web-ui -- "Storage API via Kong" --> kong-api-gateway
    
    %% Realtime logical replication connection
    supabase-realtime -- "Logical Replication" --> supabase-db


    %% Profile Selection Notes
    subgraph ProfileNotes[Profile Selection]
        direction TB
        DefaultNote[default: data.yml + ai.yml + apps.yml]
        LocalNote[ai-local: data.yml + ai-local.yml + apps-local.yml]
        GPUNote[ai-gpu: data.yml + ai-gpu.yml + apps-gpu.yml]
    end

    %% Apply styles
    classDef init fill:#c3fae8,stroke:#12b886,color:#1e1e1e
    classDef profile fill:#e3f2fd,stroke:#1976d2,color:#1e1e1e
    class supabase-db,neo4j-graph-db database
    class supabase-meta,supabase-storage,supabase-auth,supabase-api,supabase-realtime,supabase-studio database
    class ollama,ollama-local,ollama-pull,comfyui-init,n8n-init,local-deep-researcher,comfyui ai
    class open-web-ui ui
    class backend api
    class kong-api-gateway api
    class supabase-db-init init
    class DefaultNote,LocalNote,GPUNote profile
