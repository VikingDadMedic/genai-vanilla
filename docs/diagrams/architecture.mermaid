graph LR
    %% This diagram represents the default and prod-gpu deployment flavors with a containerized Ollama service.
    %% For the dev-ollama-local flavor, the 'ollama' container is removed, and 'backend', 'open-web-ui',
    %% and 'ollama-pull' connect to a local Ollama instance via host.docker.internal:11434.
    %% The prod-gpu flavor adds NVIDIA GPU resources and limits to the 'ollama' and 'backend' services.

    %% Define styles
    classDef database fill:#a5d8ff,stroke:#1971c2,color:#1e1e1e
    classDef cache fill:#f8d7da,stroke:#dc3545,color:#1e1e1e
    classDef ai fill:#f5d0fe,stroke:#9c36b5,color:#1e1e1e
    classDef ui fill:#ffd8a8,stroke:#e8590c,color:#1e1e1e
    classDef api fill:#b2f2bb,stroke:#2f9e44,color:#1e1e1e
    
    %% Database Services & Initialization
    subgraph DB[Database Services & Init]
        direction LR
        supabase-db[supabase-db]
        redis[redis]:::cache
        supabase-db-init(supabase-db-init)
        subgraph Supabase Core
        direction TB
        supabase-meta[supabase-meta]
        supabase-storage[supabase-storage]
        supabase-auth[supabase-auth]
        supabase-api[supabase-api]
        supabase-realtime[supabase-realtime]
        supabase-studio[supabase-studio]
        end
        neo4j-graph-db[neo4j-graph-db]
    end

    %% AI Services
    subgraph AI[AI Services]
        direction TB
        ollama[ollama]
        ollama-pull[ollama-pull]
        local-deep-researcher[local-deep-researcher]
    end
    
    %% API Layer (moved to right side)
    subgraph API[API Layer]
        kong-api-gateway[Kong API Gateway]
        backend[backend]
        n8n[n8n]:::api
    end
    
    %% UI Layer
    subgraph UI[UI Layer]
        open-web-ui[open-web-ui]
    end
    
    %% Connections / Dependencies
    supabase-db -- "Depends on DB Started" --> supabase-db-init
    supabase-db-init -- "Runs Custom Initialization SQL" --> supabase-db
    supabase-db-init -- "Completes Successfully" --> redis
    supabase-db-init -- "Completes Successfully" --> supabase-meta
    supabase-db-init -- "Completes Successfully" --> supabase-storage
    supabase-db-init -- "Completes Successfully" --> supabase-auth
    supabase-db-init -- "Completes Successfully" --> supabase-api
    supabase-db-init -- "Completes Successfully" --> supabase-realtime
    supabase-db-init -- "Completes Successfully" --> supabase-studio
    supabase-db-init -- "Completes Successfully" --> ollama-pull
    supabase-db-init -- "Completes Successfully" --> local-deep-researcher
    supabase-db-init -- "Completes Successfully" --> open-web-ui
    supabase-db-init -- "Completes Successfully" --> backend
    supabase-db-init -- "Completes Successfully" --> n8n

    %% Service Inter-dependencies (After db-init)
    %% Connections now go through Kong where applicable
    supabase-meta --> supabase-studio
    supabase-auth --> kong-api-gateway
    supabase-api --> kong-api-gateway
    supabase-storage --> kong-api-gateway
    supabase-realtime --> kong-api-gateway
    supabase-studio -- API Calls --> kong-api-gateway
    backend -- "HTTP API Calls (Auth, Storage)" --> kong-api-gateway
    open-web-ui -- API Calls --> kong-api-gateway

    kong-api-gateway -- Routes --> supabase-auth
    kong-api-gateway -- Routes --> supabase-api
    kong-api-gateway -- Routes --> supabase-storage
    kong-api-gateway -- Routes --> supabase-realtime
    kong-api-gateway -- Routes --> supabase-meta
    kong-api-gateway -- Routes --> supabase-studio
    kong-api-gateway -- Routes --> n8n

    kong-api-gateway -- "Depends on" --> redis
    kong-api-gateway -- "Depends on" --> supabase-auth
    kong-api-gateway -- "Depends on" --> supabase-api
    kong-api-gateway -- "Depends on" --> supabase-storage
    kong-api-gateway -- "Depends on" --> supabase-realtime
    kong-api-gateway -- "Depends on" --> supabase-meta

    backend -- "Bolt (Direct)" --> neo4j-graph-db
    backend -- "HTTP API (Direct)" --> ollama
    backend -- "DB Connection (Direct)" --> supabase-db
    n8n -- "DB Connection (Direct)" --> supabase-db
    n8n -- "Queue Management" --> redis
    backend -- "Workflow Automation" --> n8n
    backend -- "Cache, Pub/Sub, Geohashing" --> redis
    ollama-pull -- "Completes Successfully" --> local-deep-researcher
    ollama-pull -- "Completes Successfully" --> open-web-ui
    ollama-pull -- "Completes Successfully" --> backend
    ollama-pull -- "Completes Successfully" --> n8n
    ollama -- "Depends on Ollama Started" --> ollama-pull
    
    %% Local Deep Researcher connections
    local-deep-researcher -- "DB Query for LLM Config" --> supabase-db
    local-deep-researcher -- "HTTP API (Direct)" --> ollama
    open-web-ui -- "Depends on" --> local-deep-researcher
    backend -- "Research API HTTP Client" --> local-deep-researcher
    n8n -- "Research Webhook Calls" --> backend

    %% Add dependency of Studio on Kong
    supabase-studio -- "Depends on" --> kong-api-gateway
    open-web-ui -- "Storage API via Kong" --> kong-api-gateway
    
    %% Realtime logical replication connection
    supabase-realtime -- "Logical Replication" --> supabase-db


    %% Apply styles
    classDef init fill:#c3fae8,stroke:#12b886,color:#1e1e1e
    class supabase-db,neo4j-graph-db database
    class supabase-meta,supabase-storage,supabase-auth,supabase-api,supabase-realtime,supabase-studio database
    class ollama,ollama-pull,local-deep-researcher ai
    class open-web-ui ui
    class backend api
    class kong-api-gateway api
    class supabase-db-init init
