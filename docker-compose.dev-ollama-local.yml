services:
  supabase-db: # Uses base image, no custom init scripts mounted via volumes
    image: supabase/postgres:17.4.1.016
    container_name: ${PROJECT_NAME}-supabase-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${SUPABASE_DB_USER} # Must be supabase_admin for base image scripts
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: ${SUPABASE_DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./supabase/db/snapshot:/snapshot
    ports:
      - "${SUPABASE_DB_PORT}:5432"
    networks:
      - backend

  # Runs custom DB initialization scripts after supabase-db is ready
  db-init:
    image: postgres:15-alpine # Lightweight image with psql client tools
    container_name: ${PROJECT_NAME}-db-init
    restart: no
    environment:
      PGHOST: supabase-db
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      PGDATABASE: ${SUPABASE_DB_NAME}
    volumes:
      - ./supabase/db/scripts:/scripts # Mounts runner script and *.sql files
    entrypoint: ["/scripts/db-init-runner.sh"] # Executes the runner script
    depends_on:
      - supabase-db # Waits for db container to start
    networks:
      - backend

  supabase-meta:
    image: supabase/postgres-meta:v0.88.9
    container_name: ${PROJECT_NAME}-supabase-meta
    restart: unless-stopped
    depends_on:
      db-init:
        condition: service_completed_successfully
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${SUPABASE_DB_NAME}
      PG_META_DB_USER: ${SUPABASE_DB_USER}
      PG_META_DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
    ports:
      - "${SUPABASE_META_PORT}:8080"
    networks:
      - backend

  supabase-storage:
    image: supabase/storage-api:v1.22.7
    container_name: ${PROJECT_NAME}-supabase-storage
    restart: unless-stopped
    depends_on:
      db-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      JWT_SECRET: ${SUPABASE_JWT_SECRET}
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      REGION: ${STORAGE_REGION}
      FILE_SIZE_LIMIT: ${STORAGE_FILE_SIZE_LIMIT}
      STORAGE_BACKEND: ${STORAGE_BACKEND}
      FILE_STORAGE_PATH: /var/lib/storage
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: ${TENANT_ID}
      PROJECT_REF: ${PROJECT_REF}
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      # Ensure these match the API service for proper integration
      POSTGREST_URL: http://supabase-api:3000
      # Ensure this matches the Auth service for proper integration
      GOTRUE_URL: http://supabase-auth:9999
    ports:
      - "${SUPABASE_STORAGE_PORT}:5000"
    volumes:
      - supabase-storage-data:/var/lib/storage
    networks:
      - backend

  supabase-auth: # Uses standard gotrue image
    image: supabase/gotrue:v2.171.0
    container_name: ${PROJECT_NAME}-supabase-auth
    restart: unless-stopped
    depends_on:
      db-init:
        condition: service_completed_successfully
    environment:
      GOTRUE_SITE_URL: http://localhost:${SUPABASE_STUDIO_PORT}
      API_EXTERNAL_URL: http://supabase-auth:9999
      GOTRUE_DB_DRIVER: postgres
      DB_NAMESPACE: auth
      GOTRUE_DB_DATABASE_URL: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      GOTRUE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
      GOTRUE_MAILER_URLPATHS_INVITE: "/invite"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/confirm"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "/recover"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/email-change"
      GOTRUE_SMTP_HOST: "localhost"
      GOTRUE_SMTP_PORT: 1025
      GOTRUE_SMTP_USER: ""
      GOTRUE_SMTP_PASS: ""
      GOTRUE_SMTP_SENDER_NAME: "Supabase Auth"
      GOTRUE_SMTP_ADMIN_EMAIL: "admin@example.com"
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_SITE_NAME: "Local Supabase"
    ports:
      - "${SUPABASE_AUTH_PORT}:9999"
    networks:
      - backend

  supabase-api:
    image: postgrest/postgrest:v12.2.10
    container_name: ${PROJECT_NAME}-supabase-api
    restart: unless-stopped
    depends_on:
      db-init:
        condition: service_completed_successfully
    environment:
      PGRST_DB_URI: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      PGRST_DB_SCHEMA: "public,storage,auth" # Needs auth schema for JWT functions
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - "${SUPABASE_API_PORT}:3000"
    networks:
      - backend

  supabase-studio:
    image: supabase/studio:latest
    container_name: ${PROJECT_NAME}-supabase-studio
    restart: unless-stopped
    depends_on:
      db-init:
        condition: service_completed_successfully # Waits for custom DB setup
      # Studio also needs these services running to be fully functional
      supabase-meta:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
    env_file:
      - .env
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      SUPABASE_URL: http://localhost:${SUPABASE_STUDIO_PORT}
      SUPABASE_PUBLIC_URL: http://localhost:${SUPABASE_STUDIO_PORT}
      SUPABASE_AUTH_URL: http://supabase-auth:9999
      SUPABASE_REST_URL: http://supabase-api:3000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      DEFAULT_ORGANIZATION_NAME: ${PROJECT_NAME}
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
    ports:
      - "${SUPABASE_STUDIO_PORT}:3000"
    networks:
      - backend

  graph-db:
    build:
      context: ./graph-db
    container_name: ${PROJECT_NAME}-graph-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NEO4J_AUTH: ${GRAPH_DB_AUTH}
      NEO4J_server_default__advertised__address: "localhost"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_browser_remote__content__hostname__whitelist: "*"
    ports:
      - "${GRAPH_DB_PORT}:7687"
      - "${GRAPH_DB_DASHBOARD_PORT}:7474"
    volumes:
      - ./graph-db/scripts:/scripts # Contains backup/restore scripts
      - ./graph-db/snapshot:/snapshot
      - graph-db-data:/data
    networks:
      - backend

  # Ollama Model Puller - connects to the host's Ollama instance
  ollama-pull:
    image: alpine:latest
    container_name: ${PROJECT_NAME}-ollama-pull
    restart: "no"
    depends_on:
      db-init: # Needs DB ready for query
        condition: service_completed_successfully
      # No explicit depends_on ollama needed as it connects to host
    extra_hosts:
      - "host.docker.internal:host-gateway" # Allows container to reach host network
    networks:
      - backend
    environment:
      PGHOST: supabase-db
      PGPORT: 5432
      PGDATABASE: ${SUPABASE_DB_NAME}
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      OLLAMA_HOST_URL: http://host.docker.internal:11434 # Points to host machine
    volumes:
      - ./ollama-pull/scripts:/scripts
    entrypoint: ["/scripts/pull.sh"]

  # OpenWebUI - UI for Local Ollama
  open-web-ui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: ${PROJECT_NAME}-open-web-ui
    restart: unless-stopped
    depends_on:
      db-init: # Needs DB ready
        condition: service_completed_successfully
      ollama-pull: # Needs models pulled
        condition: service_completed_successfully
      supabase-storage:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway" # Allows container to reach host network
    env_file:
      - .env
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434 # Points to host machine
      - DATABASE_URL=postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      - WEBUI_SECRET_KEY=${OPEN_WEB_UI_SECRET_KEY}
    volumes:
      - open-web-ui-data:/data
    ports:
      - "${OPEN_WEB_UI_PORT}:8080"
    networks:
      - backend

  # Backend API Service with Local Ollama
  backend:
    build:
      context: ./backend
    container_name: ${PROJECT_NAME}-backend
    restart: unless-stopped
    depends_on:
      db-init: # Needs DB ready
        condition: service_completed_successfully
      ollama-pull: # Needs models pulled
        condition: service_completed_successfully
      graph-db: # Needs graph DB started
        condition: service_started
      supabase-storage:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway" # Allows container to reach host network
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      - OLLAMA_BASE_URL=http://host.docker.internal:11434 # Points to host machine
      - NEO4J_URI=bolt://graph-db:7687
      - NEO4J_USER=${GRAPH_DB_USER}
      - NEO4J_PASSWORD=${GRAPH_DB_PASSWORD}
    volumes:
      - ./backend/app:/app
      - backend-data:/app/data
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  supabase-db-data:
    driver: local
  graph-db-data:
    driver: local
  open-web-ui-data:
    driver: local
  backend-data:
    driver: local
  supabase-storage-data:
    driver: local
