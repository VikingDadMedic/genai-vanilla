services:
  # Supabase PostgreSQL Database
  supabase-db:
    image: supabase/postgres:15.8.1.054
    container_name: ${PROJECT_NAME}-supabase-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${SUPABASE_DB_USER}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: ${SUPABASE_DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_LISTEN_ADDRESSES: "*"
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./supabase/db/snapshot:/snapshot
      - ./supabase/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./supabase/db/backup.sh:/usr/local/bin/backup.sh
      - ./supabase/db/restore.sh:/usr/local/bin/restore.sh
    command: postgres -c listen_addresses='*' -c hba_file=/var/lib/postgresql/data/pg_hba.conf
    ports:
      - "${SUPABASE_DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${SUPABASE_DB_USER} -d ${SUPABASE_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend

  # Supabase Meta Service for DB Management
  supabase-meta:
    image: supabase/postgres-meta:v0.66.3
    container_name: ${PROJECT_NAME}-supabase-meta
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${SUPABASE_DB_NAME}
      PG_META_DB_USER: ${SUPABASE_DB_USER}
      PG_META_DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
    ports:
      - "${SUPABASE_META_PORT}:8080"
    networks:
      - backend

  # Supabase Auth (Gotrue)
  supabase-auth:
    image: supabase/gotrue:v2.151.0
    container_name: ${PROJECT_NAME}-supabase-auth
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    environment:
      GOTRUE_SITE_URL: http://localhost:${SUPABASE_STUDIO_PORT}
      API_EXTERNAL_URL: http://supabase-auth:9999
      GOTRUE_DB_DRIVER: postgres
      DB_NAMESPACE: auth
      GOTRUE_DB_DATABASE_URL: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      GOTRUE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
      GOTRUE_MAILER_URLPATHS_INVITE: "/invite"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/confirm"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "/recover"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/email-change"
      GOTRUE_SMTP_HOST: "localhost"
      GOTRUE_SMTP_PORT: 1025
      GOTRUE_SMTP_USER: ""
      GOTRUE_SMTP_PASS: ""
      GOTRUE_SMTP_SENDER_NAME: "Supabase Auth"
      GOTRUE_SMTP_ADMIN_EMAIL: "admin@example.com"
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      # Required by Studio and PostgREST when using JWT
      GOTRUE_SITE_NAME: "Local Supabase"
    ports:
      - "${SUPABASE_AUTH_PORT}:9999"
    networks:
      - backend

  # Supabase Studio (Dashboard)
  supabase-studio:
    image: supabase/studio:latest
    container_name: ${PROJECT_NAME}-supabase-studio
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-meta:
        condition: service_started
      supabase-auth:
        condition: service_started
    env_file:
      - .env
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      SUPABASE_URL: http://localhost:${SUPABASE_STUDIO_PORT}
      SUPABASE_PUBLIC_URL: http://localhost:${SUPABASE_STUDIO_PORT}
      SUPABASE_AUTH_URL: http://supabase-auth:9999
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      DEFAULT_ORGANIZATION_NAME: ${PROJECT_NAME}
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
    ports:
      - "${SUPABASE_STUDIO_PORT}:3000"
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend
      
  graph-db:
    build:
      context: ./graph-db
    container_name: ${PROJECT_NAME}-graph-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NEO4J_AUTH: ${GRAPH_DB_AUTH}
      # This advertises the correct address for internal container usage
      NEO4J_server_default__advertised__address: "localhost"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      # Enable APOC plugin for advanced operations
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      # Configure browser connection to use the internal Bolt connector
      NEO4J_browser_remote__content__hostname__whitelist: "*"
    ports:
      - "${GRAPH_DB_PORT}:7687" # Bolt port
      - "${GRAPH_DB_DASHBOARD_PORT}:7474" # HTTP port (dashboard)
    volumes:
      - ./graph-db/scripts:/scripts
      - ./graph-db/snapshot:/snapshot
      - graph-db-data:/data
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend

  # GPU-enabled Ollama service
  ollama:
    image: ollama/ollama:latest
    container_name: ${PROJECT_NAME}-ollama
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "${OLLAMA_PORT}:11434"
    environment:
      - "NVIDIA_VISIBLE_DEVICES=all"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
    cpus: ${PROD_ENV_CPUS:-2}
    mem_limit: ${PROD_ENV_MEM_LIMIT:-8g}
    networks:
      - backend
      
  # Ollama Model Puller - pulls models from the supabase database
  ollama-pull:
    image: alpine:latest
    container_name: ${PROJECT_NAME}-ollama-pull
    restart: "no"
    depends_on:
      - ollama
      - supabase-db
    networks:
      - backend
    environment:
      PGHOST: supabase-db
      PGPORT: 5432
      PGDATABASE: ${SUPABASE_DB_NAME}
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
    entrypoint: sh
    command: >
      -c "
      echo 'Installing required tools...' &&
      apk add --no-cache curl postgresql-client &&
      echo 'Waiting 30 seconds for Ollama to start...' &&
      sleep 30 &&
      echo 'Checking if Ollama is available...' &&
      until curl -s --fail http://ollama:11434/; do
        echo 'Waiting for Ollama API...'
        sleep 5
      done &&
      echo 'Fetching active Ollama models from database...' &&
      MODEL_LIST=$(PGPASSWORD=${SUPABASE_DB_PASSWORD} psql -h supabase-db -p 5432 -d ${SUPABASE_DB_NAME} -U ${SUPABASE_DB_USER} -t -c \"SELECT name FROM llms WHERE provider = 'ollama' AND active = true;\") &&
      if [ -z \"$${MODEL_LIST}\" ]; then
        echo 'No active Ollama models found in database.'
      else
        for MODEL in $${MODEL_LIST}; do
          MODEL_CLEAN=$(echo $${MODEL} | tr -d ' ') &&
          echo \"Pulling $${MODEL_CLEAN} model...\" &&
          curl -s -X POST http://ollama:11434/api/pull -d '{\"name\":\"'$${MODEL_CLEAN}'\"}' 
          echo
        done
      fi
      "
      
  # OpenWebUI - UI for Ollama (GPU-optimized)
  open-web-ui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: ${PROJECT_NAME}-open-web-ui
    restart: unless-stopped
    depends_on:
      ollama:
        condition: service_started
      supabase-db:
        condition: service_healthy
      ollama-pull:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - DATABASE_URL=postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      - WEBUI_SECRET_KEY=${OPEN_WEB_UI_SECRET_KEY}
    volumes:
      - open-web-ui-data:/data
    ports:
      - "${OPEN_WEB_UI_PORT}:8080"
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend
      
  # Backend API Service (GPU-optimized)
  backend:
    build:
      context: ./backend
    container_name: ${PROJECT_NAME}-backend
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
      ollama:
        condition: service_started
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      - OLLAMA_BASE_URL=http://ollama:11434
      - PROD_MODE=true
    volumes:
      - ./backend/app:/app
      - backend-data:/app/data
    ports:
      - "${BACKEND_PORT}:8000"
    cpus: ${PROD_ENV_BACKEND_CPUS:-1}
    mem_limit: ${PROD_ENV_BACKEND_MEM_LIMIT:-2g}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  supabase-db-data:
    driver: local
  graph-db-data:
    driver: local
  ollama-data:
    driver: local
  open-web-ui-data:
    driver: local
  backend-data:
    driver: local